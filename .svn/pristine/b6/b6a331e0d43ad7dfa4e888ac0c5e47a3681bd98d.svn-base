package osat;

import java.util.HashMap;
import java.util.LinkedList;

import eduni.distributions.ContinuousGenerator;

public class Pukuhuone {

	
	
	private Moottori moottori;

	private LinkedList<Asiakas> jono = new LinkedList<Asiakas>();
	private ContinuousGenerator generator;
	private TapahtumanTyyppi siirtymisTapahtumanTyyppi;
	private TapahtumanTyyppi poistumisTapahtumanTyyppi;
	
	private int kapasiteetti;
	private int asiakkaita;
	private int palveltutAsiakkaat;
	
	private double aktiiviAloitus;
	private double aktiiviLopetus;
	private double aktiiviaika;
	
	private HashMap <Double,Asiakas> asiakkaat = new HashMap <Double,Asiakas>();	
	private boolean onkoAktiivinen = false;
	
	private Suorituskykysuureet suureet;
	
	public Pukuhuone(ContinuousGenerator generator, int kapasiteetti ,Moottori moottori, TapahtumanTyyppi tyyppiS, TapahtumanTyyppi tyyppiP){
		this.moottori = moottori;
		this.kapasiteetti = kapasiteetti;
		this.generator = generator;
		this.siirtymisTapahtumanTyyppi= tyyppiS;
		this.poistumisTapahtumanTyyppi = tyyppiP;
		this.asiakkaita = 0;		
	}
	
	public void lisaaPukuhuoneeseen (Asiakas a) {
		
		if(!onkoTilaa()) {
			jono.add(a);
		} else {
		
		asiakkaita++;
		double palveluaika = generator.sample();

		moottori.uusiTapahtuma(new Tapahtuma(siirtymisTapahtumanTyyppi,Kello.getInstance().getAika()+palveluaika));
		asiakkaat.put(Kello.getInstance().getAika()+palveluaika, a);
		aktiiviAloitus();
		}
	}
	public void aktiiviAloitus () {
		if(!onkoAktiivinen) {
		aktiiviAloitus = Kello.getInstance().getAika();
		onkoAktiivinen = true;
		}
	}
	
	public void aktiiviLopetus () {
		aktiiviLopetus = Kello.getInstance().getAika();
		aktiiviaika += (aktiiviLopetus - aktiiviAloitus);
	}
	
	public Asiakas siiraPukuhuoneesta () {
		palveltutAsiakkaat++;
		Asiakas a = asiakkaat.get(Kello.getInstance().getAika());
		asiakkaat.remove(Kello.getInstance().getAika());
		
		if(asiakkaat.isEmpty()) {
			onkoAktiivinen = false;
			aktiiviLopetus();
		}
		return a;
	}
	
	public void palaaPukuhuoneeseen (Asiakas a) {
		double palveluaika = generator.sample();
		moottori.uusiTapahtuma(new Tapahtuma(poistumisTapahtumanTyyppi,Kello.getInstance().getAika()+palveluaika));
		asiakkaat.put(Kello.getInstance().getAika() + palveluaika, a);
		aktiiviAloitus();
	}
	
	public Asiakas poistuPukuhuoneesta () {
		Asiakas a = asiakkaat.get(Kello.getInstance().getAika());
		asiakkaat.remove(Kello.getInstance().getAika());
		asiakkaita--;
		
		if(asiakkaat.isEmpty()) {
			onkoAktiivinen = false;
			aktiiviLopetus();
		}
		
		if (onkoJonoa()) {
			Asiakas b = jono.poll();
			lisaaPukuhuoneeseen(b);
		}
		
		return a;
	}
	
	public boolean onkoJonoa () {
		return jono.size() != 0;
	}
	
	public int getJonoSize() {
		return jono.size();
	}
	
	public boolean onkoTilaa () {
		return asiakkaita != kapasiteetti;
	}
	
	public Suorituskykysuureet getSuorituskykysuureet () {
		return suureet;
	}
	
	public String raportti () {
		if(onkoAktiivinen) {
			aktiiviLopetus();
		}
		aktiiviaika = Math.round(aktiiviaika * 100.0) / 100.0;
		double kayttoaste = (aktiiviaika / Kello.getInstance().getAika()) * 100.0;
		kayttoaste = Math.round(kayttoaste * 100.0) / 100.0;
		
		int tunnit = (int)Kello.getInstance().getAika() / 60;
		double suoritusteho = palveltutAsiakkaat / (double) tunnit;
		suoritusteho = Math.round(suoritusteho * 100.0) / 100.0;
		
		double avgpalveluaika = Math.round((aktiiviaika / palveltutAsiakkaat) * 100.0) / 100.0;
		suureet = new Suorituskykysuureet(palveltutAsiakkaat, aktiiviaika, kayttoaste, suoritusteho, avgpalveluaika);
		
		return "Palveltuja asiakkaita: " + palveltutAsiakkaat + " AKTIIVIAIKA: " + aktiiviaika + " KÄYTTÖASTE: " + kayttoaste + "% " + " SUORITUSTEHO: "
				+suoritusteho + " asiakasta/tunti\n" + "AVG PALVELUAIKA: " + avgpalveluaika + "\n";
	}
}
