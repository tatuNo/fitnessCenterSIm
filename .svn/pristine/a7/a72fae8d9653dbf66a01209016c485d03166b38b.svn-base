package osat;

import java.util.LinkedList;

import eduni.distributions.ContinuousGenerator;


/**
 * Luokka, joka määrittelee simulaattorin FIFO-tyyppisten palvelupisteiden toiminnnan. 
 * @author Tatu Nordström
 * @author Nico Järvinen
 *
 */

public class Palvelupiste {

	private Moottori moottori;

	private LinkedList<Asiakas> jono = new LinkedList<Asiakas>();
	private ContinuousGenerator generator;
	private TapahtumanTyyppi skeduloitavanTapahtumanTyyppi;
	private int palveltutAsiakkaat;
	private double aktiiviaika;
	private double palvelunAloitus;
	
	private double lapimenoajat;
	
	private boolean varattu = false;
	
	private Suorituskykysuureet suureet;


	/**
	 * Konstruktori, jossa määritellään palvelupisteeseen liittyviä arvoja.
	 * @param generator jakauma, jonka perusteella palvelupiste luo tapahtumiaan tulevalle ajan hetkelle. Käytetään eduni.distributions pakkausta.
	 * @param moottori simulaattorin moottori.
	 * @param tyyppi skeduloitavan tapahtuman tyyppi.
	 */
	public Palvelupiste(ContinuousGenerator generator, Moottori moottori, TapahtumanTyyppi tyyppi){
		this.moottori = moottori;
		this.generator = generator;
		this.skeduloitavanTapahtumanTyyppi = tyyppi;
	}


	/**
	 * Lisää asiakkaan jonoon, asettaa asiakkaan lapimenon aloitukseksi kellon ajan.
	 * @param a jonoon lisättävä asiakas.
	 */
	public void lisaaJonoon(Asiakas a){   // Jonon 1. asiakas aina palvelussa
		jono.add(a);
		a.setLapimenoAloitus(Kello.getInstance().getAika());
	}

	/**
	 * Otetaan jonosta palveltu asiakas.
	 * Päivitetään aktiiviaika ja lapimenoajat muuttujat lopetus ja aloitus erotuksilla. 
	 * @return jonon ensimmäinen asiakas.
	 */
	public Asiakas otaJonosta(){  // Poistetaan palvelussa ollut
		aktiiviaika += (Kello.getInstance().getAika() - palvelunAloitus);
		varattu = false;
		palveltutAsiakkaat++;
		Asiakas a = jono.poll();
		a.setLapimenoLopetus(Kello.getInstance().getAika());
		lapimenoajat += (a.getLapimenoLopetus() - a.getLapimenoAloitus());
		return a;
	}

	/**
	 * Aloitetaan uusi palvelu, asiakas jonossa palvelun aikana
	 * Generoidaan uusi tapahtuma palvelun päättymisen hetkeen.
	 */
	public void aloitaPalvelu(){
		varattu = true;
		double palveluaika = generator.sample();
		moottori.uusiTapahtuma(new Tapahtuma(skeduloitavanTapahtumanTyyppi,Kello.getInstance().getAika()+palveluaika));
		palvelunAloitus = Kello.getInstance().getAika();
	}


	/**
	 * Kertoo onko palvelupiste varattu.
	 * @return palvelupisteen varauksen tila(true/false).
	 */
	public boolean onVarattu(){
		return varattu;
	}


	/**
	 * Kertoo onko jonossa väkeä.
	 * @return true jos on, false jos ei.
	 */
	public boolean onJonossa(){
		return jono.size() != 0;
	}
	
	/**
	 * Käyttöliittymään päivitetään jonon kokoja tällä metodilla.
	 * @return jonon koko kutsunta hetkellä.
	 */
	public int getJonoSize() {
		return jono.size();
	}
	
	/**
	 * @return palauttaa Suorituskykysuureet olion, jossa palvelupistekohtaiset simulointitulokset.
	 */
	public Suorituskykysuureet getSuorituskykysuureet() {
		return suureet;
	}
	
	/**
	 * Tätä metodia kutsutaan moottorissa, kun simulointi päättyy.
	 * Lasketaan suorituskykysuureet ja pyöristetään ne kahden desimaalin tarkkuudelle.
	 * Luodaan Suorituskykysuureet olio näistä suureista, jotta tallentaminen tietokantaan olisi näppärämpää.
	 * @return tekstimuotoinen raportti simuloinnin tuloksista, palvelupistekohtainen.	 
	 */
	public String raportti () {
		double kayttoaste = (aktiiviaika / Kello.getInstance().getAika()) * 100.0;
		kayttoaste = Math.round(kayttoaste * 100.0) / 100.0;
		aktiiviaika = Math.round(aktiiviaika * 100.0) / 100.0;
		
		int tunnit = (int)Kello.getInstance().getAika() / 60;
		double suoritusteho = palveltutAsiakkaat / (double) tunnit;
		suoritusteho = Math.round(suoritusteho * 100.0) / 100.0;
		
		double avgpalveluaika = Math.round((aktiiviaika / palveltutAsiakkaat) * 100.0) / 100.0;
		double avglapimenoaika = Math.round((lapimenoajat / palveltutAsiakkaat) * 100.0) / 100.0;
		double avgjononpituus = Math.round((lapimenoajat / Kello.getInstance().getAika()) * 100.0) / 100.0;
		lapimenoajat = Math.round(lapimenoajat * 100.0) / 100.0;
		
		suureet = new Suorituskykysuureet(palveltutAsiakkaat,aktiiviaika, kayttoaste, suoritusteho, avgpalveluaika, lapimenoajat, avglapimenoaika, avgjononpituus);
		
		return "Palveltuja asiakkaita: " + palveltutAsiakkaat + " AKTIIVIAIKA: " + aktiiviaika + " KÄYTTÖASTE: " + kayttoaste + "% " + " SUORITUSTEHO: "
		+ suoritusteho + " asiakasta/tunti\n" + "AVG PALVELUAIKA: " + avgpalveluaika + " KOKONAISOLESKELUAIKA: " + lapimenoajat +
		" AVG LÄPIMENOAIKA: "+ avglapimenoaika + " AVG JONON PITUUS "+ avgjononpituus + "\n";
	}
}
